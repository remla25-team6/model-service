name: Release

on: 
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]
  
jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Run some tests
      # - name: Run Tests
      #   env:
      #     MODEL_URL: https://example.com/api
      #   run: tests

      # Disclaimer: Queried ChatGPT-4o for instructions on how to retrieve the latest stable model release
      - name: Get latest stable model release from model_training
        run: |
          VERSION=$(gh release list -R remla25-team6/model-training \
              --limit 100 \
              --json tagName,isPrerelease \
              --jq '[.[] | select(.isPrerelease == false)][0].tagName')
            echo "ML_MODEL_VERSION=$VERSION" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ github.token }}

      # Download model embeddings and model pickels
      - name: Download model artifacts
        run: |
          gh release download "$ML_MODEL_VERSION" \
            -R remla25-team6/model-training \
            -p "*-${ML_MODEL_VERSION}.pkl"
        env:
          GH_TOKEN: ${{ github.token }}

      # Docker Build and Push
      - name: Log in to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Parse version info from tag
        run: |
            # GITHUB_REF is like refs/tags/v2.3.5, so strip the first 11 chars
            VERSION=${GITHUB_REF:11}
            MAJOR=$(echo "$VERSION" | cut -d . -f 1)
            MINOR=$(echo "$VERSION" | cut -d . -f 2)
            PATCH=$(echo "$VERSION" | cut -d . -f 3)
            echo "version=$VERSION" >> $GITHUB_ENV
            echo "version_major=$MAJOR" >> $GITHUB_ENV
            echo "version_minor=$MINOR" >> $GITHUB_ENV
            echo "version_patch=$PATCH" >> $GITHUB_ENV

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
            
      - name: Build and push Docker image
        run: |
          IMG="ghcr.io/${{github.repository}}"
          IMG=${IMG@L} # lower case the image`
          docker build \
            --build-arg ML_MODEL_VERSION=${{ env.ML_MODEL_VERSION }} \
            --tag $IMG:${{ env.version }} \
            --tag $IMG:${{ env.version_major }}.${{ env.version_minor }}.latest \
            --tag $IMG:${{ env.version_major }}.latest \
            --tag $IMG:latest \
            .
          docker push --all-tags $IMG
